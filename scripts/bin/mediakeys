#!/usr/bin/env python2
import struct
import glob
import select
import subprocess
import pyinotify

def call(*args):
    return lambda : subprocess.Popen(args)

def controlvolume(cmd):
    def action():
        sinks = subprocess.Popen(['pactl', 'list', 'short', 'sinks'], stdout=subprocess.PIPE).stdout.read()
        bestsink = '0'
        state = 'default'
        for sink in sinks.splitlines():
            attribs = sink.split()
            if attribs[-1] == 'RUNNING':
                bestsink = attribs[0]
                state = 'RUNNING'
            elif attribs[-1] == 'IDLE' and state == 'DEFAULT':
                bestsink = attribs[0]
                state = 'IDLE'
        command = cmd % bestsink
        subprocess.Popen(command.split())
    return action

CMDS = {163: call('musiccontrol', 'Prev'),
        164: call('musiccontrol', 'PlayPause'),
        165: call('musiccontrol', 'Next'),
        113: controlvolume('pactl set-sink-mute %s toggle'),
        114: controlvolume('pactl set-sink-volume %s -5%%'),
        115: controlvolume('pactl set-sink-volume %s +5%%'),
        }

devices = dict()
for devicepath in glob.glob("/dev/input/event*"):
    devices[devicepath] = open(devicepath)

class Processor(pyinotify.ProcessEvent):
    def process_IN_CREATE(self, event):
        print 'IN', event
        if event.name.startswith('event'):
            devices[event.pathname] = open(event.pathname)

    def process_IN_DELETE(self, event):
        print 'DEL', event
        devices.pop(event.pathname, None)

watcher = pyinotify.WatchManager()
watcher.add_watch('/dev/input/', pyinotify.IN_DELETE | pyinotify.IN_CREATE)
notifier = pyinotify.Notifier(watcher, Processor())

format = "llHHi"

KEY_TYPE = 1

s = struct.calcsize(format)

while True:
    rlist, wlist, xlist = select.select(devices.values(), [], [], 5)
    if notifier.check_events(1):
        notifier.read_events()
        notifier.process_events()
    for device in rlist:
        try:
            data = device.read(s)
        except Exception, e:
            print e
            continue
        time1, time2, evtype, evcode, evvalue = struct.unpack(format, data)
        if evtype == KEY_TYPE:
            if evcode in CMDS and evvalue == 1:
                print "Found Media button", evcode
                CMDS[evcode]()
