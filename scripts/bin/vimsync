#!/usr/bin/env python2
import subprocess
import argparse
import sys
import os


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', help='File to sync', default=None)
parser.add_argument('-t', '--target', help='Target to sync file to', default=None)
parser.add_argument('-p', '--port', help='SSH port', default='22')
options = parser.parse_args()

REPOBASE = "/home/Jo/code"

files = []

def getmodifiedgit(folder):
    files = []
    gitroot = subprocess.Popen(['git', 'rev-parse', '--show-toplevel'], stdout=subprocess.PIPE).communicate()[0].strip()
    modfiles = subprocess.Popen(['git', 'status', '--porcelain'], cwd=folder, stdout=subprocess.PIPE).communicate()[0].strip()
    for filepath in modfiles.splitlines():
        filepath = filepath.strip()[2:].strip().strip('"')
        files.append(os.path.join(gitroot, filepath))
    return files

if options.file is None:
    files = getmodifiedgit('.')
else:
    file = options.file
    if os.path.isfile(file):
        files.append(os.path.abspath(file))
    elif os.path.isdir(file):
        files = getmodifiedgit('.')
    else:
        print "This only works with files or folders"
        os.exit(1)

connections = options.target.split(',')

for file in files:
    metapath = file[len(REPOBASE)+1:]
    destfile = os.path.join('/opt', 'code', metapath)
    if not destfile:
        print "Could not determine destination"
        sys.exit(1)

    print destfile


    for connection in set(connections):
        destdir = os.path.dirname(destfile)
        subprocess.call(["ssh", "-p", options.port, connection, "mkdir -p '%s'" % destdir])
        subprocess.call(["scp", '-P', options.port,  file, "%s:'%s'" % (connection, destfile)])
