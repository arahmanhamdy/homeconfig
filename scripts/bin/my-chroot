#!/bin/bash

shopt -s extglob

out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> ERROR:" "$@"; } >&2
msg() { out "==>" "$@"; }
msg2() { out "  ->" "$@";}
die() { error "$@"; exit 1; }

api_fs_mount() {
  if ! mountpoint -q "$1"; then
    mount -B "$1" "$1" && ROOT_IS_BIND=1
  fi &&
  mount -t proc proc "$1/proc" -o nosuid,noexec,nodev &&
  mount -t sysfs sys "$1/sys" -o nosuid,noexec,nodev &&
  mount -t devtmpfs udev "$1/dev" -o mode=0755,nosuid &&
  mount -t devpts devpts "$1/dev/pts" -o mode=0620,gid=5,nosuid,noexec &&
  mount -t tmpfs shm "$1/dev/shm" -o mode=1777,nosuid,nodev &&
  #mount -t tmpfs run "$1/run" -o nosuid,nodev,mode=0755 &&
  mount -t tmpfs tmp "$1/tmp" -o mode=1777,strictatime,nodev,nosuid,size=50M
}

api_fs_umount() {
	out "Unmounting mountpoints in old chroot"
	for i in `cat /proc/mounts | cut -d' ' -f2 | grep "^${chrootdir}/" | sort -r`; do
		out "Unmounting ${i}"
		umount "${i}";
	done
    umount ${chrootdir}
}

is_mounted() {
    cat /proc/mounts | cut -d' ' -f2 | grep "^${chrootdir}" && return 0
    return 1
}

api_stop_ps() {
    return 0
	out "Kill remaining processes that run in the chroot"
	KILL_PIDS=""
	for i in /proc/[0-9]*; do
		PID=$(echo -n $i | sed "s:/proc/::");
		ROOT=$(readlink "$i/root" || true);
		if [ "${ROOT}" == "${chrootdir}" ]; then
			out "Killing PID ${PID}";
			KILL_PIDS="${KILL_PIDS} ${PID}";
			kill "${PID}" || error "Process with PID ${PID} already exited";
		fi
	done

	for time_left in `seq 29 -1 0`; do
		RUNNING_KILL_PIDS="";
		out "Checking if all processes died (${time_left}s left)"

		if [ "${KILL_PIDS}" != "" ]; then
			out "Will check PIDs ${KILL_PIDS}"
		fi

		for pid in ${KILL_PIDS}; do
			out "Checking if process with PID ${pid} is still running";
			STATUS=$(sudo kill -CONT ${pid} 2>&1 && echo "RUNNING" || echo "KILLED")
			if [ "${STATUS}" == "RUNNING" ]; then
				out "Process with PID ${pid} is still running";
				RUNNING_KILL_PIDS="${RUNNING_KILL_PIDS} ${pid}";
			fi
		done

		KILL_PIDS="${RUNNING_KILL_PIDS}";

		if [ "${KILL_PIDS}" == "" ]; then
			break;
		fi

		sleep 1;
	done

}


stop() {
    api_fs_umount
    api_stop_ps
}


usage() {
  cat <<EOF
usage: ${0##*/} chroot-dir [command]

If 'command' is unspecified, ${0##*/} will launch /bin/sh.
Commands can contain --start or --stop

EOF
}

if [[ -z $1 || $1 = @(-h|--help) ]]; then
  usage
  exit $(( $# ? 0 : 1 ))
fi

(( EUID == 0 )) || die 'This script must be run with root privileges'
chrootdir=`readlink -f $1`
shift

is_mounted
STATE=$?

[[ -d $chrootdir ]] || die "Can't create chroot on non-directory %s" "$chrootdir"

if [ ${STATE} -ne 0 -a "${1}" != "--stop" ]; then
    echo "start"
    api_fs_mount "$chrootdir" || die "failed to setup API filesystems in chroot %s" "$chrootdir"
    mount -B /etc/resolv.conf "$chrootdir/etc/resolv.conf"
fi

if [ "$1" != "--stop" -a "$1" != "--start" ]; then
    echo "chroot"
    SHELL=/bin/bash chroot "$chrootdir" "$@"
fi

if [ "$1" = "--stop" -o ${STATE} -eq 1 ]; then
    echo "stop"
    if [ "$1" != "--start" ]; then
        api_fs_umount;api_stop_ps; umount "$chrootdir/etc/resolv.conf";
    fi
fi


